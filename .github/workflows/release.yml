name: Build and Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g. v1.0.0)'
        required: true

jobs:
  package:
    strategy:
      matrix:
        go-version: [1.20]
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set Version
        run: echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV

      - name: Get Wails dependencies
        run: sudo apt update && sudo apt install -y libgtk-3-dev libwebkit2gtk-4.0-dev
        if: matrix.os == 'ubuntu-latest'

      - name: Get Wails
        run: go get -u github.com/wailsapp/wails/cmd/wails

      - name: Build package macOS
        run: |
          export PATH=${PATH}:`go env GOPATH`/bin
          mkdir -p ~/.wails
          cp wails.json ~/.wails/
          wails build -p
          npm install -g appdmg
          appdmg dmg-spec.json synterix.dmg
          zip synterix.zip synterix.dmg
        if: matrix.os == 'macos-latest'

      - name: Build package linux
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          mkdir -p ~/.wails
          cp wails.json ~/.wails/
          wails build
          tar -czvf synterix.tar.gz ./build/synterix
        if: matrix.os == 'ubuntu-latest'

      - name: Build package windows
        run: |
          $GP = (go env GOPATH)
          $env:path = "$env:path;$GP\bin"
          New-Item -ItemType directory -Path "$HOME\.wails" -Force
          Copy-Item -Path "$PWD\wails.json" -Destination "$HOME\.wails\wails.json"
          choco install mingw
          wails build -p
          Compress-Archive -Path .\build\synterix* -DestinationPath .\synterix.zip
        if: matrix.os == 'windows-latest'

      - name: Upload artifact macOS
        uses: actions/upload-artifact@v1
        with:
          name: synterix-macOS
          path: synterix.zip
        if: matrix.os == 'macos-latest'

      - name: Upload artifact linux
        uses: actions/upload-artifact@v2-preview
        with:
          name: synterix-linux
          path: synterix.tar.gz
        if: matrix.os == 'ubuntu-latest'

      - name: Upload artifact windows
        uses: actions/upload-artifact@v1
        with:
          name: synterix-windows
          path: synterix.zip
        if: matrix.os == 'windows-latest'

  release:
    runs-on: ubuntu-latest
    needs: package
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Create tag if not exists
        run: |
          git fetch --tags
          if ! git rev-parse ${{ github.event.inputs.version }} >/dev/null 2>&1; then
            git tag ${{ github.event.inputs.version }}
            git push origin ${{ github.event.inputs.version }}
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.version }}
          release_name: ${{ github.event.inputs.version }}
          draft: false
          prerelease: false

      - name: Download macOS package
        uses: actions/download-artifact@v1
        with:
          name: synterix-macOS

      - name: Upload macOS package to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./synterix-macOS/synterix.zip
          asset_name: optimus_${{ github.event.inputs.version }}_macOS.zip
          asset_content_type: application/octet-stream

      - name: Download linux package
        uses: actions/download-artifact@v1
        with:
          name: synterix-linux

      - name: Upload Linux package to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./synterix-linux/synterix.tar.gz
          asset_name: optimus_${{ github.event.inputs.version }}_linux_x86_64.tar.gz
          asset_content_type: application/octet-stream

      - name: Download windows package
        uses: actions/download-artifact@v1
        with:
          name: synterix-windows

      - name: Upload Windows package to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./synterix-windows/synterix.zip
          asset_name: optimus_${{ github.event.inputs.version }}_windows_x86_64.zip
          asset_content_type: application/octet-stream
