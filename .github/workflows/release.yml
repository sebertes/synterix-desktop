name: Build and Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string
        default: '1.0.0'

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Set version output
        id: set-version
        run: echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT

      - name: Create tag if it does not exist
        shell: bash
        run: |
          if git rev-parse "refs/tags/${{ github.event.inputs.version }}" >/dev/null 2>&1; then
            echo "Tag '${{ github.event.inputs.version }}' already exists."
          else
            echo "Creating tag '${{ github.event.inputs.version }}'"
            git tag ${{ github.event.inputs.version }}
            git push origin ${{ github.event.inputs.version }}
          fi

      - name: Create GitHub Release (if not exists)
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          if gh release view "${{ github.event.inputs.version }}" >/dev/null 2>&1; then
            echo "Release '${{ github.event.inputs.version }}' already exists."
          else
            echo "Creating release '${{ github.event.inputs.version }}'"
            gh release create "${{ github.event.inputs.version }}" \
              --title "Synterix v${{ github.event.inputs.version }}" \
              --notes "Automated release for version v${{ github.event.inputs.version }}"
          fi

  build:
    needs: prepare
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            build-platform: linux/amd64
            build-file-name: linux
          - os: macos-latest
            build-platform: darwin/universal
            build-file-name: macos
          - os: windows-latest
            build-platform: windows/amd64
            build-file-name: windows
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build Wails Application
        uses: dAppServer/wails-build-action@main
        with:
          build-name: synterix
          build-platform: ${{ matrix.build-platform }}
          package: true

      - name: Zip build artifacts
        shell: bash
        run: |
          mkdir -p dist
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            powershell -Command "Compress-Archive -Path build/bin/* -DestinationPath dist/synterix-windows-${{ needs.prepare.outputs.version }}.zip"
          else
            zip -r dist/synterix-${{ matrix.build-file-name }}-${{ needs.prepare.outputs.version }}.zip build/bin
          fi

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: synterix-${{ matrix.os }}
          path: ./dist/*

      - name: Upload release asset
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.prepare.outputs.version }}
          files: dist/synterix-${{ matrix.build-file-name }}-${{ needs.prepare.outputs.version }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
