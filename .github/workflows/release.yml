name: Build and Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string
        default: '1.0.0'

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            build-platform: linux/amd64
            artifact-ext: tar.gz
            artifact-pattern: "synterix*"
          - os: macos-latest
            build-platform: darwin/universal
            artifact-ext: dmg
            artifact-pattern: "Synterix.app"
            package-cmd: |
              brew install create-dmg
              cd ./build/bin
              create-dmg Synterix.app synterix-${{ github.event.inputs.version }}.dmg
          - os: windows-latest
            build-platform: windows/amd64
            artifact-ext: zip
            artifact-pattern: "synterix*"
            package-cmd: |
              cd ./build/bin
              $exeName = (Get-ChildItem -Filter "synterix*.exe" | Select-Object -First 1).Name
              if (-not $exeName) {
                Write-Error "No .exe file found in build directory"
                exit 1
              }
              $zipName = "synterix-${{ github.event.inputs.version }}.zip"
              Compress-Archive -Path $exeName, "webview2loader.dll" -DestinationPath $zipName -Force
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build Wails Application
        uses: dAppServer/wails-build-action@main
        with:
          build-name: synterix
          build-platform: ${{ matrix.build-platform }}
          package: true

      - name: List build directory (debug)
        run: |
          echo "Build directory contents:"
          ls -la ./build/bin
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            pwsh -Command "Get-ChildItem ./build/bin -Recurse | Format-Table -AutoSize"
          fi

      - name: Package artifacts
        if: matrix.package-cmd != ''
        run: ${{ matrix.package-cmd }}

      - name: Rename Artifacts
        run: |
          VERSION=${{ github.event.inputs.version }}
          BUILD_DIR="./build/bin"
          
          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            # macOS - we already created the DMG in package step
            ARTIFACT_PATH=$(find "$BUILD_DIR" -name "synterix-*.dmg" | head -n 1)
            NEW_NAME="synterix-${VERSION}.dmg"
          elif [ "${{ matrix.os }}" == "windows-latest" ]; then
            # Windows - we created a ZIP file
            ARTIFACT_PATH=$(find "$BUILD_DIR" -name "synterix-*.zip" | head -n 1)
            NEW_NAME="synterix-${VERSION}.zip"
          else
            # Linux - use the original pattern
            ARTIFACT_PATH=$(find "$BUILD_DIR" -name "${{ matrix.artifact-pattern }}" | head -n 1)
            NEW_NAME="synterix-${VERSION}.${{ matrix.artifact-ext }}"
          fi
          
          if [ -z "$ARTIFACT_PATH" ]; then
            echo "::error::No artifact found in $BUILD_DIR"
            ls -la "$BUILD_DIR" || true
            exit 1
          fi
          
          # Only rename if the name doesn't already match
          if [[ "$(basename "$ARTIFACT_PATH")" != "$NEW_NAME" ]]; then
            mv "$ARTIFACT_PATH" "$BUILD_DIR/$NEW_NAME"
            echo "Renamed $ARTIFACT_PATH to $BUILD_DIR/$NEW_NAME"
          else
            echo "Artifact already has correct name: $NEW_NAME"
          fi

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: release-${{ matrix.os }}
          path: ./build/bin/synterix-${{ github.event.inputs.version }}.*

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: List downloaded files
        run: find artifacts -type f

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: "v${{ github.event.inputs.version }}"
          body: "Release version ${{ github.event.inputs.version }} - Built for all platforms"
          draft: false
          prerelease: false
          files: |
            artifacts/**/synterix-*